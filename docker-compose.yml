services:
  discovery-ms:
      build:
        context: ./discovery-ms
        dockerfile: Dockerfile
      ports:
        - "8761:8761"
      networks:
        - microservice-network
      volumes:
        - ./discovery-ms/src:/app/src
        - ./discovery-ms/target:/app/target
        - ./discovery-ms/pom.xml:/app/pom.xml
      command: ["sh", "-c", "mvn clean package -DskipTests && java -jar /app/target/*.jar"]
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
        interval: 30s
        timeout: 10s
        retries: 5

  config-ms:
      build:
        context: ./config-ms
        dockerfile: Dockerfile
      ports:
        - "8888:8888"
      environment:
        - SPRING_PROFILES_ACTIVE=git
      networks:
        - microservice-network
      depends_on:
        discovery-ms:
          condition: service_healthy
      volumes:
        - ./config-ms/src:/app/src
        - ./config-ms/target:/app/target
        - ./config-ms/pom.xml:/app/pom.xml
      command: ["sh", "-c", "mvn clean package -DskipTests && java -jar /app/target/*.jar"]
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
        interval: 30s
        timeout: 10s
        retries: 5

  mongo-order-db:
      image: mongo:latest
      ports:
        - "27017:27017"
      volumes:
        - mongo-data:/data/db
      networks:
        - microservice-network

  mysql-db:
      image: mysql:latest
      ports:
        - "3306:3306"
      environment:
          MYSQL_ROOT_PASSWORD:
          MYSQL_ALLOW_EMPTY_PASSWORD: True
      volumes:
        - mysql-data:/var/lib/mysql
      networks:
        - microservice-network

  customer-ms:
    build:
      context: ./customer-ms
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
      - JAVA_OPTS=""
    networks:
      - microservice-network
    depends_on:
      mysql-db:
        condition: service_started
      discovery-ms:
        condition: service_healthy
      config-ms:
        condition: service_healthy
    volumes:
      - ./customer-ms/src:/app/src
      - ./customer-ms/target:/app/target
      - ./customer-ms/pom.xml:/app/pom.xml
    command: [ "sh", "-c", "mvn clean package -DskipTests && java -jar /app/target/*.jar" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5



  order-command-ms:
      build:
        context: ./order-ms/order-command-ms
        dockerfile: Dockerfile
      ports:
        - "8082:8082"
      environment:
        - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
        - JAVA_OPTS=""
      networks:
        - microservice-network
      depends_on:
        mongo-order-db:
          condition: service_started
        discovery-ms:
          condition: service_healthy
        config-ms:
          condition: service_healthy
      volumes:
        - ./order-ms/order-command-ms/src:/app/src
        - ./order-ms/order-command-ms/target:/app/target
        - ./order-ms/order-command-ms/pom.xml:/app/pom.xml
      command: ["sh", "-c", "mvn clean package -DskipTests && java -jar /app/target/*.jar"]
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
        interval: 30s
        timeout: 10s
        retries: 5

  order-query-ms:
      build:
        context: ./order-ms/order-query-ms
        dockerfile: Dockerfile
      ports:
        - "8083:8083"
      environment:
        - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
        - JAVA_OPTS=""
      networks:
        - microservice-network
      depends_on:
        mysql-db:
          condition: service_started
        discovery-ms:
          condition: service_healthy
        config-ms:
          condition: service_healthy
      volumes:
        - ./order-ms/order-query-ms/src:/app/src
        - ./order-ms/order-query-ms/target:/app/target
        - ./order-ms/order-query-ms/pom.xml:/app/pom.xml
      command: ["sh", "-c", "mvn clean package -DskipTests && java -jar /app/target/*.jar"]
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
        interval: 30s
        timeout: 10s
        retries: 5

  gateway-ms:
      build:
        context: ./gateway-ms
        dockerfile: Dockerfile
      ports:
        - "9090:9090"
      networks:
        - microservice-network
      depends_on:
        discovery-ms:
          condition: service_healthy
        config-ms:
          condition: service_healthy
      volumes:
        - ./gateway-ms/src:/app/src
        - ./gateway-ms/target:/app/target
        - ./gateway-ms/pom.xml:/app/pom.xml
      command: ["sh", "-c", "mvn clean package -DskipTests && java -jar /app/target/*.jar"]
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:9090/actuator/health" ]
        interval: 30s
        timeout: 10s
        retries: 5


  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - microservice-network

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: kafka1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - microservice-network

networks:
  microservice-network:
    driver: bridge
volumes:
  mongo-data:
  mysql-data: